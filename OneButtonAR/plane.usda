#usda 1.0
(
    customLayerData = {
        string creator = "SceneKit export preview 0.65"
    }
    defaultPrim = "plane"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "plane" (
    assetInfo = {
        string name = "plane"
    }
    kind = "component"
)
{
    def Scope "Geom"
    {
        def Xform "plane"
        {
            def Xform "Geom"
            {
                def Xform "plane"
                {
                    def Xform "Geom"
                    {
                        def Xform "plane"
                        {
                            def Mesh "backFace"
                            {
                                float3[] extent = [(-0.5, -0.5, 0), (0.5, 0.5, 0)]
                                int[] faceVertexCounts = [3, 3]
                                int[] faceVertexIndices = [2, 3, 0, 3, 1, 0]
                                rel material:binding = </plane/Materials/material>
                                normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)]
                                point3f[] points = [(-0.5, -0.5, 0), (0.5, -0.5, 0), (-0.5, 0.5, 0), (0.5, 0.5, 0)]
                                texCoord2f[] primvars:st = [(0, 0), (1, 0), (0, 1), (1, 1)] (
                                    interpolation = "vertex"
                                )
                                uniform token subdivisionScheme = "none"
                            }

                            def Mesh "frontFace"
                            {
                                float3[] extent = [(-0.5, -0.5, 0), (0.5, 0.5, 0)]
                                int[] faceVertexCounts = [3, 3]
                                int[] faceVertexIndices = [0, 1, 3, 0, 3, 2]
                                rel material:binding = </plane/Materials/material>
                                normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)]
                                point3f[] points = [(-0.5, -0.5, 0), (0.5, -0.5, 0), (-0.5, 0.5, 0), (0.5, 0.5, 0)]
                                texCoord2f[] primvars:st = [(0, 0), (1, 0), (0, 1), (1, 1)] (
                                    interpolation = "vertex"
                                )
                                uniform token subdivisionScheme = "none"
                            }
                        }
                    }
                }
            }
        }
    }

    def Scope "Materials"
    {
        def Material "material"
        {
            token outputs:surface.connect = </plane/Materials/material/surfaceShader.outputs:surface>

            def Shader "surfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                color3f inputs:emissiveColor = (0, 0, 0)
                float inputs:metallic = 0
                normal3f inputs:normal = (1, 1, 1)
                float inputs:occlusion = 0
                float inputs:opacity = 1
                float inputs:roughness = 0.9
                token outputs:surface
            }
        }
    }
}

